
# Google Cloud Functions Best Practices for Email Campaigns

## Overview
This guide provides best practices for setting up and using Google Cloud Functions with your email campaign system for optimal performance and cost efficiency.

## Setup Best Practices

### 1. Project Organization
- Use a dedicated GCP project for email functions
- Enable billing alerts to monitor costs
- Set up proper IAM roles and permissions
- Use descriptive naming conventions

### 2. Function Configuration
- **Runtime**: Use Node.js 20 for latest features and performance
- **Memory**: 1GB recommended for handling large email batches
- **Timeout**: 540s (9 minutes) for processing large campaigns
- **Region**: Choose region closest to your users/Supabase instance

### 3. Environment Variables
Required environment variables:
```
SUPABASE_URL=your-supabase-project-url
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key
```

Optional environment variables:
```
RESEND_API_KEY=your-resend-api-key (if using Resend)
SENDGRID_API_KEY=your-sendgrid-api-key (if using SendGrid)
```

## Performance Optimization

### 1. Rate Limiting Configuration
- **Conservative**: 300-600 emails/hour (safe for all providers)
- **Moderate**: 1800-3600 emails/hour (for established domains)
- **Aggressive**: 3600+ emails/hour (only for warmed domains)

### 2. Batch Size Optimization
- **Small batches**: 5-10 emails (better error handling)
- **Medium batches**: 10-25 emails (balanced performance)
- **Large batches**: 25-50 emails (maximum throughput)

### 3. Account Distribution
- Distribute emails evenly across available accounts
- Use round-robin or weighted distribution
- Monitor account quotas and limits

## Cost Optimization

### 1. Function Invocations
- Current pricing: ~$0.40 per 1M invocations
- For 1000 emails: approximately $0.001
- Very cost-effective for email campaigns

### 2. Memory and CPU Usage
- Use 1GB memory for optimal performance
- CPU scales automatically based on memory
- Monitor execution time to optimize costs

### 3. Monitoring and Alerts
- Set up billing alerts
- Monitor function metrics in GCP Console
- Track errors and retry patterns

## Security Best Practices

### 1. Access Control
- Use least privilege principle
- Enable authentication for sensitive functions
- Use service accounts for API access
- Rotate API keys regularly

### 2. Data Protection
- Never log sensitive email content
- Use HTTPS for all communications
- Implement proper error handling
- Sanitize input data

### 3. Monitoring and Logging
- Enable Cloud Logging
- Set up error alerting
- Monitor for suspicious activity
- Keep logs for compliance

## Scaling Considerations

### 1. Concurrent Executions
- Default limit: 1000 concurrent executions
- Can be increased via quota requests
- Plan for peak campaign volumes

### 2. Regional Distribution
- Deploy in multiple regions for redundancy
- Use Cloud Load Balancing for high availability
- Consider data locality requirements

### 3. Error Handling and Retries
- Implement exponential backoff
- Use dead letter queues for failed emails
- Monitor and alert on error rates
- Implement circuit breaker patterns

## Integration with Email Providers

### 1. SMTP Providers
- Support for Gmail, Outlook, custom SMTP
- Implement connection pooling
- Handle authentication errors gracefully
- Monitor quota usage

### 2. Apps Script Integration
- Handle quota limits (100 emails/day per script)
- Implement proper error handling
- Use multiple scripts for higher volume
- Monitor execution quotas

### 3. Third-party Services
- Integrate with Resend, SendGrid, etc.
- Use webhook callbacks for status updates
- Implement proper API error handling
- Monitor service availability

## Troubleshooting Guide

### Common Issues:
1. **Function timeout**: Increase timeout or reduce batch size
2. **Memory errors**: Increase memory allocation
3. **Rate limiting**: Adjust sending rate or distribution
4. **Authentication errors**: Check API keys and permissions
5. **Network errors**: Implement retry logic with backoff

### Debug Steps:
1. Check Cloud Logging for errors
2. Monitor function metrics
3. Test with smaller batches
4. Verify environment variables
5. Check API quotas and limits

## Deployment Commands

### Basic Deployment
```bash
gcloud functions deploy sendEmailCampaign \
  --runtime nodejs20 \
  --trigger-http \
  --allow-unauthenticated \
  --memory 1GB \
  --timeout 540s \
  --region us-central1 \
  --set-env-vars SUPABASE_URL=your-url,SUPABASE_SERVICE_ROLE_KEY=your-key
```

### Production Deployment
```bash
gcloud functions deploy sendEmailCampaign \
  --runtime nodejs20 \
  --trigger-http \
  --memory 2GB \
  --timeout 540s \
  --region us-central1 \
  --max-instances 10 \
  --set-env-vars SUPABASE_URL=your-url,SUPABASE_SERVICE_ROLE_KEY=your-key \
  --ingress-settings internal-and-gclb
```

### Update Deployment
```bash
gcloud functions deploy sendEmailCampaign \
  --source . \
  --update-env-vars NEW_VAR=value
```

## Monitoring and Maintenance

### 1. Regular Monitoring
- Check function execution metrics weekly
- Monitor error rates and response times
- Review cost reports monthly
- Update dependencies quarterly

### 2. Performance Tuning
- Analyze slow executions
- Optimize batch sizes based on performance
- Adjust memory allocation as needed
- Update runtime versions regularly

### 3. Backup and Recovery
- Keep function source code in version control
- Document environment variables
- Maintain deployment scripts
- Test disaster recovery procedures

## Support and Resources

### Google Cloud Documentation
- Cloud Functions: https://cloud.google.com/functions/docs
- Monitoring: https://cloud.google.com/monitoring/docs
- Billing: https://cloud.google.com/billing/docs

### Community Resources
- Stack Overflow: google-cloud-functions tag
- Google Cloud Community: cloud.google.com/community
- GitHub: google-cloud-node repository

### Emergency Contacts
- Google Cloud Support (if you have a support plan)
- Your internal DevOps team
- Email campaign system administrators

---

Last Updated: 2024
Version: 1.0
Maintained by: Email Campaign System Team
